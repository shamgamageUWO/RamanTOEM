function filter = makeFilter(method, bin_size, bin_size2)
% fliter = makeFilter(method, bin_size, bin_size2)
%
% If Matlab has Signal Processing Toolbox then you can make your own filter
% the following way:
% filter= fir1(n,fc,window); where n is the order of the filter(NOT # of
% points), fc is the cutt-off frequency, and window is well... the window
% - if no window is entered, then by default a Hamming window is choosen
% but if you'd like to make say a kaiser window then enter the following
% command:
% window=kaiser(n+1,Beta); where Beta is the side lobe parameter
%
% Note: for the kaiser filters, commented out are the commands to get the
% filter coefficients if you have the Singal Processing Toolbox
%
% Note: the original kaiser filters in here were wrong as they all had even
% # coefficients because instead of using the order of the filter to
% construct it, the number of points was used - but has been fixed but I've
% kept the old coefficients of the wrong filter incase comparison tests
% want to be done
%
% Returns a one or two dimmensional kernel to be used in 

if nargin < 2
    bin_size = NaN;
    bin_size2 = NaN;
elseif nargin < 3
    bin_size2 = NaN;
end 


switch method
    case 'average'
        if ~isnan(bin_size2)
            filter = ones(bin_size,bin_size2)/(bin_size * bin_size2);
        else
            filter = ones(1,bin_size)/bin_size;
        end
    case 'averagesum'
        if ~isnan(bin_size2)
            filter = ones(bin_size,bin_size2);
        else
            filter = ones(1,bin_size);
        end
    case 'kaiser'
        switch bin_size
            case 21
                % number of pts = 21, cutoff = 0.01, beta = 3.935
                % window=kaiser(21,3.935);filter=fir1(20,0.01,window);
                 filter=[0.00754203851755093,0.0142412093856201,0.0224668742825474,0.0318760177984079,0.0419733223459126,0.0521485231630646,0.0617287197178604,0.0700402436442564,0.0764733380197964,0.0805423718934065,0.0819346824631537,0.0805423718934065,0.0764733380197964,0.0700402436442564,0.0617287197178604,0.0521485231630646,0.0419733223459126,0.0318760177984079,0.0224668742825474,0.0142412093856201,0.00754203851755093];
            % old wrong filter  filter = [0.00717498984679311,0.0132138745337709,0.0205854950778256,0.0290177092217009,0.0381162754938958,0.0473912201282611,0.0562943923266278,0.0642647301660468,0.0707767878109865,0.0753875887423468,0.0777769366517448,0.0777769366517448,0.0753875887423468,0.0707767878109865,0.0642647301660468,0.0562943923266278,0.0473912201282611,0.0381162754938958,0.0290177092217009,0.0205854950778256,0.0132138745337709,0.00717498984679311];
            case 43
                % kaiser pts = 43, cutoff = 0.02, beta = 3.935
                % window=kaiser(43,3.935);filter=fir1(42,0.02,window);
                  filter = [0.00283256791733832,0.00406983698370382,0.00551643203381978,0.00717082558421843,0.00902565710806161,0.0110674886234278,0.0132767550962272,0.0156279214927621,0.0180898506372947,0.0206263779165534,0.0231970806630633,0.0257582220919671,0.0282638423074952,0.0306669624620405,0.0329208629349514,0.0349803926434411,0.0368032644881685,0.0383512915856952,0.0395915203887082,0.0404972200044673,0.0410486918775887,0.0412338703180127,0.0410486918775887,0.0404972200044673,0.0395915203887082,0.0383512915856952,0.0368032644881685,0.0349803926434411,0.0329208629349514,0.0306669624620405,0.0282638423074952,0.0257582220919671,0.0231970806630633,0.0206263779165534,0.0180898506372947,0.0156279214927621,0.0132767550962272,0.0110674886234278,0.00902565710806161,0.00717082558421843,0.00551643203381978,0.00406983698370382,0.00283256791733832];
            %old wrong filter   filter = [0.00273013530185223,0.00389906670109975,0.00526431954741363,0.00682514943558065,0.00857557950651267,0.0105041571803384,0.0125938786032423,0.0148222920879183,0.0171617854564297,0.0195800554105666,0.0220407501290435,0.0245042695061490,0.0269287010859586,0.0292708640809566,0.0314874291404589,0.0335360779636436,0.0353766646000154,0.0369723394593624,0.0382905977176464,0.0393042159470793,0.0399920443482467,0.0403396267904853,0.0403396267904853,0.0399920443482467,0.0393042159470793,0.0382905977176464,0.0369723394593624,0.0353766646000154,0.0335360779636436,0.0314874291404589,0.0292708640809566,0.0269287010859586,0.0245042695061490,0.0220407501290435,0.0195800554105666,0.0171617854564297,0.0148222920879183,0.0125938786032423,0.0105041571803384,0.00857557950651267,0.00682514943558065,0.00526431954741363,0.00389906670109975,0.00273013530185223];

            case 51
                % kaiser pts = 51, cutoff = 0.005, beta = 3.935
                  filter = [0.00300523536342874,0.00399700212653586,0.00509623909950539,0.00629823353533384,0.00759644595605129,0.00898254376914776,0.0104464685579330,0.0119765365774148,0.0135595713085116,0.0151810662577854,0.0168253755519270,0.0184759292800215,0.0201154699954864,0.0217263063157181,0.0232905791617842,0.0247905358721740,0.0262088072110847,0.0275286821783286,0.0287343755179300,0.0298112829168062,0.0307462190822997,0.0315276341841916,0.0321458045374343,0.0325929938783799,0.0328635821400413,0.0329541592494904,0.0328635821400413,0.0325929938783799,0.0321458045374343,0.0315276341841916,0.0307462190822997,0.0298112829168062,0.0287343755179300,0.0275286821783286,0.0262088072110847,0.0247905358721740,0.0232905791617842,0.0217263063157181,0.0201154699954864,0.0184759292800215,0.0168253755519270,0.0151810662577854,0.0135595713085116,0.0119765365774148,0.0104464685579330,0.00898254376914776,0.00759644595605129,0.00629823353533384,0.00509623909950539,0.00399700212653586,0.00300523536342874];
            %old wrong filter   filter = [0.00294396044681815,0.00389574920597890,0.00494895900711978,0.00609930136409580,0.00734083009722536,0.00866596929529821,0.0100655706848954,0.0115290000572503,0.0130442518317663,0.0145980902737008,0.0161762153432137,0.0177634506454466,0.0193439504874300,0.0209014226374950,0.0224193630355130,0.0238812984254946,0.0252710326821850,0.0265728924850806,0.0277719679598452,0.0288543439597354,0.0298073177978747,0.0306195994627461,0.0312814906500504,0.0317850393183684,0.0321241669165591,0.0322947659288135,0.0322947659288135,0.0321241669165591,0.0317850393183684,0.0312814906500504,0.0306195994627461,0.0298073177978747,0.0288543439597354,0.0277719679598452,0.0265728924850806,0.0252710326821850,0.0238812984254946,0.0224193630355130,0.0209014226374950,0.0193439504874300,0.0177634506454466,0.0161762153432137,0.0145980902737008,0.0130442518317663,0.0115290000572503,0.0100655706848954,0.00866596929529821,0.00734083009722536,0.00609930136409580,0.00494895900711978,0.00389574920597890,0.00294396044681815];                
            case 65
                % kaiser pts = 65, cutoff = 0.01, beta = 3.935
                % window=kaiser(65,3.935); filter=fir1(64,0.01,window);
                 filter = [0.00208041377809879,0.00263529520079209,0.00324610080647070,0.00391223875822034,0.00463249765503094,0.00540503220193745,0.00622735676068614,0.00709634711087766,0.00800825063544322,0.00895870502241188,0.00994276544913407,0.0109549400874428,0.0119892336407251,0.0130391984986336,0.0140979929742670,0.0151584459741290,0.0162131273449774,0.0172544230456402,0.0182746142076775,0.0192659590779074,0.0202207767795905,0.0211315317885225,0.0219909179962411,0.0227919412255371,0.0235279990737287,0.0241929569866884,0.0247812195110791,0.0252877957330717,0.0257083579880910,0.0260392930167520,0.0262777448457148,0.0264216487871160,0.0264697560747278,0.0264216487871160,0.0262777448457148,0.0260392930167520,0.0257083579880910,0.0252877957330717,0.0247812195110791,0.0241929569866884,0.0235279990737287,0.0227919412255371,0.0219909179962411,0.0211315317885225,0.0202207767795905,0.0192659590779074,0.0182746142076775,0.0172544230456402,0.0162131273449774,0.0151584459741290,0.0140979929742670,0.0130391984986336,0.0119892336407251,0.0109549400874428,0.00994276544913407,0.00895870502241188,0.00800825063544322,0.00709634711087766,0.00622735676068614,0.00540503220193745,0.00463249765503094,0.00391223875822034,0.00324610080647070,0.00263529520079209,0.00208041377809879];
            otherwise
                PiconUserError('Please see comments in MakeFilter.m to learn how to make filter that isnt already here')
        end
    case '3s5s'
        filter = [1 2 3 3 3 2 1] ./ 15;
    case '3s'
        filter = [1 1 1]./3;
    case '5s'
        filter = [1 1 1 1 1]./5;
    case 'gaussian'
        % Requires Paul's gauss function
        % gauss(X, mu, sigma)

        xval = -floor(bin_size/2):floor(bin_size/2);
        gx = gauss(xval,0,(bin_size/4));
        %plot(xval ,gx)
        
        if ~isnan(bin_size2);
            yval = -floor(bin_size2/2):floor(bin_size2/2);
            gy = gauss(yval,0,(bin_size2/4));
            %plot(yval ,gy)
            
            filter = zeros(length(xval),length(yval));
            for x = 1:length(xval)
               for y = 1:length(yval)
                   filter(x,y) = gx(x)*gy(y);
               end
            end
        else
            filter = gx;
        end

        filter_norm = sum(filter(:));
        filter = filter ./ filter_norm ;
        
        
    case 'diff'
        switch bin_size
            case 3
                filter = [-1 0 1];
            case 7
                % diff_filter_7 = remez(6, [0 .1], [0 .1*pi], 'd');
                filter = [0.0172264864360320,-0.152216657491290,0.752754035651943,0,-0.752754035651943,0.152216657491290,-0.0172264864360320];
            case 21
                % diff_filter_21 = remez(20, [0 .4], [0 .4*pi], 'd');
                filter = [-3.66228242389980e-06,5.58629835341769e-05,-0.000428703061969337,0.00220374648849966,-0.00853774287162260,0.0266633143454295,-0.0704571446184791,0.165046325476187,-0.366890509539487,0.925917761628746,0,-0.925917761628746,0.366890509539487,-0.165046325476187,0.0704571446184791,-0.0266633143454295,0.00853774287162260,-0.00220374648849966,0.000428703061969337,-5.58629835341769e-05,3.66228242389980e-06];
            otherwise
                PiconUserError('Sorry, I don''t know how to make "diff" filters of that size. Maybe you could program it in?')
        end
    otherwise
        PiconUserError('Filter type not recognized.')

end

