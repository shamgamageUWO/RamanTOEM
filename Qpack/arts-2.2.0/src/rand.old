This function contains old pieces of code to create random data.

//======================================================================
//=== Methods To Generate Random Data
//======================================================================

  md_data.push_back
    ( MdRecord
      ( NAME("RandSetSeed"),
  	DESCRIPTION(
          "Sets the random seed in a \"random\" way (using the clock).\n"
          "If not this function is called, the same random sequence is\n"
          "obtained for each run."),
	OUTPUT(),
	INPUT(),
	GOUTPUT(),
	GINPUT(),
	KEYWORDS(),
	TYPES()));

  md_data.push_back
    ( MdRecord
      ( NAME("VectorRandUniform"),
  	DESCRIPTION(
          "Fills the vector with random data uniformerly distributed between\n"
          "the lower and higher limit given. The length of the vector shall\n"
          "also be given. The random data is uncorrelated."),
	OUTPUT(),
	INPUT(),
	GOUTPUT( Vector_ ),
	GINPUT(),
	KEYWORDS( "low",     "high",    "n" ),
	TYPES(    Numeric_t, Numeric_t, Index_t )));

  md_data.push_back
    ( MdRecord
      ( NAME("VectorRandGaussian"),
  	DESCRIPTION(
          "Fills the vector with random data having a normal PDF, zero mean\n"
          "and the standard deviation given. The length of the vector shall\n"
          "also be given. The random data is uncorrelated."),
	OUTPUT(),
	INPUT(),
	GOUTPUT( Vector_ ),
	GINPUT(),
	KEYWORDS( "stddev",  "n" ),
	TYPES(    Numeric_t, Index_t )));



/////////////////////////////////////////////////////////////////////////////
//   Random data
/////////////////////////////////////////////////////////////////////////////

//// rand_uniform ////////////////////////////////////////////////////
/**
   Creates a vector with random data uniformerly distributed between
   the lower and higher limit given.

   The random data is uncorrelated. The length of the random vector is
   taken from r.nelem().

   \retval   r          random vector
   \param    x_low      lower limit for the random values
   \param    x_high     upper limit for the random data

   \author Patrick Eriksson
   \date   2000-11-26
*/
void rand_uniform(
		  VectorView  r,
		  const Numeric     x_low,
		  const Numeric     x_high )
{
  Numeric dx = x_high-x_low;

  for ( Index i=0; i<r.nelem(); i++ )
    r[i] = x_low + dx * (Numeric(rand())/Numeric(RAND_MAX));
}


//// rand_gaussian ////////////////////////////////////////////////////
/**
   Creates a gaussian random vector with zero mean and 
   the standard deviation given.

   The random data is uncorrelated. The length of the random vector to
   generate is taken from r.nelem().

   The algorith is taken from Numerical Recipies, Section 7.2. 
   See www.nr.com.

   \retval   r          random vector
   \param    s          standard deviation

   \author Patrick Eriksson
   \date   2000-11-27
*/
void rand_gaussian(
		   VectorView       r,
		   const Numeric   s )
{
  Vector  z(2);    // A vector of length 2 with uniform PDF between -1 and 1
  Numeric rad;     // The radius cooresponding to z
  Numeric fac;     // Normalisation factor
 
  const Index n = r.nelem();

  for ( Index i=0; i<n; )
  {
    rand_uniform( z, -1, 1 );
    rad = z[0]*z[0] + z[1]*z[1];

    if ( (rad<1) && (rad>0) )
    {
      fac = sqrt( -2*log(rad)/rad );
      r[i] = s*fac*z[0];
      i++;
      if ( i < n )
      {
        r[i] = s*fac*z[1];        
        i++;
      }
    }
  }
}

//// rand_matrix_uniform ////////////////////////////////////////////////////
/**
   Creates a matrix with random data uniformerly distributed between
   the lower and higher limit given.

   The random data is uncorrelated.

   \retval   m          random matrix
   \param    x_low      lower limit for the random values
   \param    x_high     upper limit for the random data

   \author Patrick Eriksson
   \date   2000-12-07
*/
void rand_matrix_uniform(
			 MatrixView       m,
			 const Numeric   x_low,
			 const Numeric   x_high )
{
  for ( Index i=0; i<m.nrows(); ++i )
  {
    rand_uniform( m(i,Range(joker)), x_low, x_high );
    // Matpack: m(i,Range(joker)) picks out the ith row of m. Because
    // rand_uniform takes an argument of type VectorView, it is
    // perfectly ok to call it with the row of a matrix. No
    // temporaries needed!
  }
}



//// rand_matrix_gaussian ////////////////////////////////////////////////////
/**
   Creates a gaussian random matrix with zero mean and 
   the standard deviation given.

   The random data is uncorrelated.

   See further rand_gaussian

   \retval   y          random vector
   \param    s          standard deviation

   \author Patrick Eriksson
   \date   2000-12-07
*/
void rand_matrix_gaussian(
			  MatrixView    m,
		    const Numeric       s )
{
  for ( Index i=0; i<m.nrows(); ++i )
  {
    rand_gaussian( m(i,Range(joker)), s );
    // Matpack: m(i,Range(joker)) picks out the ith row of m. Because
    // rand_uniform takes an argument of type VectorView, it is
    // perfectly ok to call it with the row of a matrix. No
    // temporaries needed!
  }
}



/////////////////////////////////////////////////////////////////////////////
//   Random data
/////////////////////////////////////////////////////////////////////////////

void rand_uniform(
		  VectorView r,
		  const Numeric    x_low,
		  const Numeric    x_high );

void rand_gaussian(
		   VectorView r,
		   const Numeric    s );

void rand_matrix_uniform(
			 MatrixView m,
			 const Numeric   x_low,
			 const Numeric   x_high );

void rand_matrix_gaussian(
			  MatrixView r,
			  const Numeric    s );


/**
   See the the online help (arts -d FUNCTION_NAME)

   \author Patrick Eriksson
   \date   2001-01-14
*/
void RandSetSeed( )
{
  srand( (unsigned int) time( NULL ) );
}



/**
   See the the online help (arts -d FUNCTION_NAME)

   \author Patrick Eriksson
   \date   2000-?-?
*/
void VectorRandUniform(
                    Vector&   y,
              const String&   y_name,
              const Numeric&  x_low,
              const Numeric&  x_high,
              const Index&      n )
{
  out2<<"  Filling " << y_name << " with uniform random data.\n";
  y.resize( n );
  rand_uniform( y, x_low, x_high );
}



/**
   See the the online help (arts -d FUNCTION_NAME)

   \author Patrick Eriksson
   \date   2000-?-?
*/
void VectorRandGaussian(
                    Vector&   y,
              const String&   y_name,
              const Numeric&  stddev,
              const Index&      n )
{
  out2<<"  Filling " << y_name << " with Gaussian random data.\n";
  y.resize( n );
  rand_gaussian( y, stddev );
}



